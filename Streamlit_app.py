import os
import datetime
import requests
import streamlit as st
from typing import Dict, Any

# ----------------------------
# Config & Constants
# ----------------------------
# Allow overriding via env var, but default to your original URL.
BASE_URL: str = os.getenv("BACKEND_BASE_URL", "http://localhost:8000")
QUERY_ENDPOINT: str = f"{BASE_URL}/query"
APP_TITLE: str = "🌍 Travel Planner Agentic Application"
SPINNER_MSG: str = "Bot is thinking..."

# ----------------------------
# Streamlit Page Setup
# ----------------------------
st.set_page_config(
    page_title=APP_TITLE,
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title(APP_TITLE)
st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# ----------------------------
# Session State
# ----------------------------
if "messages" not in st.session_state:
    # Keeping this as in your original code (even though not shown),
    # in case you decide to render chat history later.
    st.session_state.messages = []

# ----------------------------
# Helpers
# ----------------------------
def build_markdown(answer: str) -> str:
    """Return the exact markdown wrapper you had, with minor formatting hardening."""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d at %H:%M")
    return (
        "# 🌍 AI Travel Plan\n\n"
        f"**Generated:** {timestamp}  \n"
        "**Created by:** Atriyo's Travel Agent\n\n"
        "---\n\n"
        f"{answer}\n\n"
        "---\n\n"
        "*This travel plan was generated by AI. Please verify all information, "
        "especially prices, operating hours, and travel requirements before your trip.*"
    )

def post_query(payload: Dict[str, Any]) -> requests.Response:
    """POST to the backend with a modest timeout. (Same endpoint & payload as before.)"""
    # Keeping functionality the same: send {"question": <user_input>} to /query
    # Add a small timeout to avoid indefinite hangs; this doesn't change semantics.
    return requests.post(QUERY_ENDPOINT, json=payload, timeout=60)

# ----------------------------
# Form
# ----------------------------
with st.form(key="query_form", clear_on_submit=True):
    user_input: str = st.text_input(
        "User Input",
        placeholder="e.g. Plan a trip to Goa for 5 days"
    )
    submit_button: bool = st.form_submit_button("Send")

if submit_button:
    text = user_input.strip()
    if not text:
        st.warning("Please enter a destination or request before sending.")
    else:
        try:
            with st.spinner(SPINNER_MSG):
                response = post_query({"question": text})

            if response.status_code == 200:
                answer = response.json().get("answer", "No answer returned.")
                st.markdown(build_markdown(answer))
            else:
                # Preserve original behavior (surface backend error text)
                st.error(" Bot failed to respond: " + response.text)

        except requests.Timeout:
            st.error("The request timed out. Please try again.")
        except requests.RequestException as e:
            # Avoid raising a string (which was invalid) and show a clear error instead
            st.error(f"The request failed due to a network error: {e}")
        except Exception as e:
            st.error(f"An unexpected error occurred: {e}")
